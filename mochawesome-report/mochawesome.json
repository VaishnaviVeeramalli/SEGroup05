{
  "stats": {
    "suites": 15,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-12T15:32:54.768Z",
    "end": "2024-04-12T15:32:55.004Z",
    "duration": 236,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ede31486-50a4-48db-a78d-2553e10253ac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "14480785-fc95-4801-bb52-044f916b8be3",
          "title": "API Routes",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\index.test.js",
          "file": "\\test\\index.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should respond with \"hi\" for GET /",
              "fullTitle": "API Routes should respond with \"hi\" for GET /",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/')\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.text).to.equal('Hello mern stack');\n    done();\n  });",
              "err": {},
              "uuid": "6589ac43-40c3-46e2-bd3a-eca908605b4e",
              "parentUUID": "14480785-fc95-4801-bb52-044f916b8be3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6589ac43-40c3-46e2-bd3a-eca908605b4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c665f2e-948a-4097-90ed-d933d23b4713",
          "title": "GET /getHistory",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\product.test.js",
          "file": "\\test\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get the user history",
              "fullTitle": "GET /getHistory should get the user history",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 'user_id';\nconst userHistory = [\n{ action: 'Action 1', date: new Date() },\n{ action: 'Action 2', date: new Date() },\n];\nconst docs = {\n  history: userHistory,\n};\n// Stub User.findOne to simulate retrieving user history\nconst findOneStub = sinon.stub(User, 'findOne');\nfindOneStub.callsFake((query, callback) => {\n  callback(null, docs);\n});\nchai.request(app)\n  .get('/api/users/getHistory')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(500);\n    findOneStub.restore();\n    done();\n  });",
              "err": {},
              "uuid": "8f206d3a-f183-4b69-a2f8-39e27bb53f04",
              "parentUUID": "6c665f2e-948a-4097-90ed-d933d23b4713",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f206d3a-f183-4b69-a2f8-39e27bb53f04"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "775b932e-337d-4d9a-8fb6-ba02547a4d03",
          "title": "POST /uploadProduct",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\product.test.js",
          "file": "\\test\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should upload a product",
              "fullTitle": "POST /uploadProduct should upload a product",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productData = {\n  // Replace with the product data you want to upload\n  name: 'Product Name',\n  price: 100,\n  description: 'Product Description',\n};\n// Stub Product.save to simulate saving a product\nconst saveStub = sinon.stub(Product.prototype, 'save');\nsaveStub.callsFake(function (callback) {\n  // Simulate saving the product\n  callback(null);\n});\nchai.request(app)\n  .post('/api/product/uploadProduct')\n  .set('x-auth', 'user_token') // Set the user token\n  .send(productData)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('success', true);\n    saveStub.restore();\n    done();\n  });",
              "err": {},
              "uuid": "0f9c868b-cb54-43af-8458-e0fab7b5c39c",
              "parentUUID": "775b932e-337d-4d9a-8fb6-ba02547a4d03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f9c868b-cb54-43af-8458-e0fab7b5c39c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eb0101cb-ee81-4922-a718-b176e79dc4eb",
          "title": "POST /getProducts",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\product.test.js",
          "file": "\\test\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve products",
              "fullTitle": "POST /getProducts should retrieve products",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const term = 'search_term'; // Replace with the search term you want to use\n// Stub Product.find to simulate finding products\nconst findStub = sinon.stub(Product, 'find');\nfindStub.callsFake(function (query, callback) {\n  // Simulate finding products\n  callback(null, [{ name: 'Product 1' }, { name: 'Product 2' }]);\n});\nchai.request(app)\n  .post('/api/product/getProducts')\n  .set('x-auth', 'user_token') // Set the user token\n  .send({ term })\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('success', true);\n    expect(res.body).to.have.property('products');\n    expect(res.body.products).to.be.an('array');\n    findStub.restore();\n    done();\n  });",
              "err": {},
              "uuid": "15105490-889d-4c78-93e0-30195675a47e",
              "parentUUID": "eb0101cb-ee81-4922-a718-b176e79dc4eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15105490-889d-4c78-93e0-30195675a47e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e9018bb-c13a-4b20-a4ce-071b9f3bf4c1",
          "title": "POST /getDetail",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\product.test.js",
          "file": "\\test\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve product details",
              "fullTitle": "POST /getDetail should retrieve product details",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productId = 'product_id'; // Replace with the product ID you want to use for testing\n// Stub Product.find to simulate finding the product\nconst findStub = sinon.stub(Product, 'find');\nfindStub.callsFake(function (query, callback) {\n  // Simulate finding the product\n  callback(null, [{ _id: 'product_id', name: 'Product 1', description: 'Product description' }]);\n});\nchai.request(app)\n  .post('/api/product/getDetail')\n  .set('x-auth', 'user_token') // Set the user token\n  .send({ id: productId })\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(200);\n  \n    findStub.restore();\n    done();\n  });",
              "err": {},
              "uuid": "ac26ad6d-3a56-4480-aecd-e18e68da3a0e",
              "parentUUID": "1e9018bb-c13a-4b20-a4ce-071b9f3bf4c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac26ad6d-3a56-4480-aecd-e18e68da3a0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "16846e26-40f1-456d-a577-cee8b9a53152",
          "title": "POST /getCartDetails",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\product.test.js",
          "file": "\\test\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve cart details",
              "fullTitle": "POST /getCartDetails should retrieve cart details",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productIds = ['product_id_1', 'product_id_2']; // Replace with the product IDs you want to use for testing\n// Stub Product.find to simulate finding the products\nconst findStub = sinon.stub(Product, 'find');\nfindStub.callsFake(function (query, callback) {\n  // Simulate finding the products\n  callback(null, [\n    { _id: 'product_id_1', name: 'Product 1', description: 'Product 1 description' },\n    { _id: 'product_id_2', name: 'Product 2', description: 'Product 2 description' }\n  ]);\n});\nchai.request(app)\n  .post('/api/product/getCartDetails')\n  .set('x-auth', 'user_token') // Set the user token\n  .send({ array: productIds })\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(200);\n    findStub.restore();\n    done();\n  });",
              "err": {},
              "uuid": "58ac572e-924a-4e1b-9be1-8d726ee459c4",
              "parentUUID": "16846e26-40f1-456d-a577-cee8b9a53152",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "58ac572e-924a-4e1b-9be1-8d726ee459c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e08044bf-43b3-493f-93fa-81e4cf5986cf",
          "title": "GET /",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should respond with \"hi\" for GET /",
              "fullTitle": "GET / should respond with \"hi\" for GET /",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/api/users/')\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.text).to.equal('hi');\n    done();\n  });",
              "err": {},
              "uuid": "4f751793-64a5-4c0d-aa32-5d32bdcf9152",
              "parentUUID": "e08044bf-43b3-493f-93fa-81e4cf5986cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f751793-64a5-4c0d-aa32-5d32bdcf9152"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8d0eeef-6607-443d-aca0-c5a6b762091b",
          "title": "GET /auth",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user information for GET /auth",
              "fullTitle": "GET /auth should return user information for GET /auth",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n  .get('/api/users/auth')\n  .end((err, res) => {\n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('_id');\n    expect(res.body).to.have.property('isAdmin');\n    expect(res.body).to.have.property('isAuth');\n    done();\n  });",
              "err": {},
              "uuid": "754b5908-14e5-44b4-9a84-cc4ebda0c041",
              "parentUUID": "d8d0eeef-6607-443d-aca0-c5a6b762091b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "754b5908-14e5-44b4-9a84-cc4ebda0c041"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f2df12e8-f3ca-4491-a958-58359195501a",
          "title": "POST /register",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should register a new user and return registerSuccess:true",
              "fullTitle": "POST /register should register a new user and return registerSuccess:true",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  email: 'newuser@example.com',\n  password: 'password123',\n};\n  \nconst saveStub = sinon.stub(User.prototype, 'save');\nsaveStub.callsFake(function (callback) {\n  callback(null, this);\n});\n  \nchai.request(app)\n  .post('/api/users/register')\n  .send(newUser)\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('registerSuccess', true);\n  \n    saveStub.restore();\n  \n    done();\n  });",
              "err": {},
              "uuid": "3c345e23-7f4f-469c-8c7b-9bd3897fc8b2",
              "parentUUID": "f2df12e8-f3ca-4491-a958-58359195501a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c345e23-7f4f-469c-8c7b-9bd3897fc8b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1cb2bb9f-8aa8-4be5-98af-634a619369e8",
          "title": "POST /login",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log in a user and return loginSuccess:true",
              "fullTitle": "POST /login should log in a user and return loginSuccess:true",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  email: 'user@example.com',\n  password: 'password123',\n};\n  \n// Stub User.findOne to simulate finding a user with correct credentials\nconst findOneStub = sinon.stub(User, 'findOne');\nfindOneStub.callsFake((query, callback) => {\n  callback(null, user);\n});\nconst isMatch = true;\n// Stub user.comparePassword to simulate a successful password match\nconst comparePasswordStub = sinon.stub(User.prototype, 'comparePassword');\ncomparePasswordStub.callsFake((password, callback) => {\n  callback(null, isMatch);\n});\n  \n// Stub user.generateToken to simulate token generation\nconst generateTokenStub = sinon.stub(User.prototype, 'generateToken');\ngenerateTokenStub.callsFake((callback) => {\n  callback(null, user);\n});\n  \nchai.request(app)\n  .post('/api/users/login')\n  .send(user)\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(500);\n    findOneStub.restore()\n    comparePasswordStub.restore()\n    done();\n  });",
              "err": {},
              "uuid": "c888e60f-1caa-4fdd-867e-e413378c8ee8",
              "parentUUID": "1cb2bb9f-8aa8-4be5-98af-634a619369e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c888e60f-1caa-4fdd-867e-e413378c8ee8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "96b36f4b-8945-491c-884c-ed04078ef8ff",
          "title": "GET /logout",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log out a user and return logoutSuccess:true",
              "fullTitle": "GET /logout should log out a user and return logoutSuccess:true",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const user = {\n  _id: 'user_id',\n};\n  \n// Stub User.findOneAndUpdate to simulate clearing the user's token\nconst findOneAndUpdateStub = sinon.stub(User, 'findOneAndUpdate');\nfindOneAndUpdateStub.callsFake((query, update, callback) => {\n  callback(null, user);\n});\n  \nchai.request(app)\n  .get('/api/users/logout')\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('logoutSuccess', true);\n  \n    findOneAndUpdateStub.restore();\n  \n    done();\n  });",
              "err": {},
              "uuid": "e3d41b82-7fb8-4b5d-8fab-2f32327bd4ac",
              "parentUUID": "96b36f4b-8945-491c-884c-ed04078ef8ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3d41b82-7fb8-4b5d-8fab-2f32327bd4ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f8a957a8-eca9-45ae-80f9-ece91250021c",
          "title": "POST /addToCart",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a product to the user cart and return the updated cart",
              "fullTitle": "POST /addToCart should add a product to the user cart and return the updated cart",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 'your-user-id';\nconst productId = '1';\nconst user = {\n  _id: userId,\n  cart: [],\n};\n// Stub User.findOne to simulate retrieving the user's information\nconst findOneStub = sinon.stub(User, 'findOne');\nfindOneStub.callsFake((query, callback) => {\n  // Simulate a user with an empty cart\n \n  callback(null, user);\n});\n  \n// Stub User.findOneAndUpdate to simulate updating the user's cart\nconst findOneAndUpdateStub = sinon.stub(User, 'findOneAndUpdate');\nfindOneAndUpdateStub.callsFake((query, update, options, callback) => {\n  // Simulate updating the cart\n  const updatedUser = {\n    _id: userId,\n    cart: [\n      {\n        id: productId,\n        quantity: 1,\n        date: Date.now(),\n      },\n    ],\n  };\n  callback(null, updatedUser);\n});\n  \nchai.request(app)\n  .post('/api/users/addToCart')\n  .set('x-auth', 'user_token') // Set the user token\n  .send({ productId: productId })\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('success', true);\n    expect(res.body).to.have.property('cart').to.be.an('array').to.have.lengthOf(1);\n  \n    findOneStub.restore();\n    findOneAndUpdateStub.restore();\n  \n    done();\n  });",
              "err": {},
              "uuid": "e512f28a-4b90-43f7-baa8-3d6be5b6a7ac",
              "parentUUID": "f8a957a8-eca9-45ae-80f9-ece91250021c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e512f28a-4b90-43f7-baa8-3d6be5b6a7ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7ac7d40e-d11a-4767-89b2-9361c6db55a0",
          "title": "POST /removeCartItem",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should remove a product from the user cart and return updated cart details",
              "fullTitle": "POST /removeCartItem should remove a product from the user cart and return updated cart details",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 'your-user-id';\nconst itemId = 'item_id';\nconst productIds = ['product_id1', 'product_id2']; // Replace with actual product IDs\n  \n// Stub User.findOneAndUpdate to simulate removing an item from the cart\nconst findOneAndUpdateStub = sinon.stub(User, 'findOneAndUpdate');\nfindOneAndUpdateStub.callsFake((query, update, options, callback) => {\n  // Simulate removing the item from the cart\n  const userInfo = {\n    _id: userId,\n    cart: [\n      {\n        id: productIds[0],\n        quantity: 1,\n        date: Date.now(),\n      },\n      {\n        id: productIds[1],\n        quantity: 2,\n        date: Date.now(),\n      },\n    ],\n  };\n  callback(null, userInfo );\n});\n  \n// Stub Product.find to simulate retrieving cart product details\nconst findStub = sinon.stub(Product, 'find');\nfindStub.callsFake((query, callback) => {\n  // Simulate retrieving product details\n  const cartDetails = [\n    {\n      _id: productIds[0],\n      // Add product details here\n    },\n    {\n      _id: productIds[1],\n      // Add product details here\n    },\n  ];\n  callback(null, cartDetails);\n});\n  \nchai.request(app)\n  .post('/api/users/removeCartItem')\n  .set('x-auth', 'user_token') // Set the user token\n  .send({ id: itemId })\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(500);\n    findOneAndUpdateStub.restore();\n    findStub.restore();\n  \n    done();\n  });",
              "err": {},
              "uuid": "9551c7c9-0f82-4646-be63-75396f36909e",
              "parentUUID": "7ac7d40e-d11a-4767-89b2-9361c6db55a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9551c7c9-0f82-4646-be63-75396f36909e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a94be497-dd0b-430a-a246-a966889446f8",
          "title": "GET /getOrders",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get the list of orders",
              "fullTitle": "GET /getOrders should get the list of orders",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orders = [\n  // Replace with actual order data\n  { orderId: 'order1', amount: 100 },\n  { orderId: 'order2', amount: 200 },\n];\n  \n// Stub Payment.find to simulate retrieving orders\nconst findStub = sinon.stub(Payment, 'find');\nfindStub.callsFake((query, callback) => {\n  // Simulate retrieving orders\n  callback(null, orders);\n});\n  \nchai.request(app)\n  .get('/api/users/getOrders')\n  .set('x-auth', 'user_token') // Set the user token\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('success', true);\n    expect(res.body).to.have.property('orders').to.be.an('array').to.have.lengthOf(2); // Modify the length accordingly\n  \n    findStub.restore();\n  \n    done();\n  });",
              "err": {},
              "uuid": "c5114648-6f40-44ef-bb1c-5eb0fb9cf867",
              "parentUUID": "a94be497-dd0b-430a-a246-a966889446f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5114648-6f40-44ef-bb1c-5eb0fb9cf867"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c60e9cf5-6159-46d0-93cd-03ee38f73fcf",
          "title": "POST /deleteOrder",
          "fullFile": "C:\\Users\\Asus\\Desktop\\projects\\cric\\ShoppingApp\\server\\test\\users.test.js",
          "file": "\\test\\users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete an order",
              "fullTitle": "POST /deleteOrder should delete an order",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderId = 'order1'; // Replace with an actual order ID\n  \n// Stub Payment.findByIdAndRemove to simulate deleting an order\nconst findByIdAndRemoveStub = sinon.stub(Payment, 'findByIdAndRemove');\nfindByIdAndRemoveStub.callsFake((query, callback) => {\n  // Simulate order deletion\n  callback(null, { _id: orderId });\n});\n  \nchai.request(app)\n  .post('/api/users/deleteOrder')\n  .set('x-auth', 'user_token') // Set the user token\n  .send({ _id: orderId })\n  .end((err, res) => {\n    if (err) return done(err);\n  \n    expect(res).to.have.status(200);\n    expect(res.body).to.have.property('success', true);\n  \n    findByIdAndRemoveStub.restore();\n  \n    done();\n  });",
              "err": {},
              "uuid": "5338a7a3-94ce-4fd6-a332-71b2b740b68a",
              "parentUUID": "c60e9cf5-6159-46d0-93cd-03ee38f73fcf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5338a7a3-94ce-4fd6-a332-71b2b740b68a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}